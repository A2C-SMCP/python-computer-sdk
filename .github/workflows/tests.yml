# 文件名: tests.yml / File name: tests.yml
# 作者: JQQ / Author: JQQ
# 创建日期: 2025/09/26 / Created: 2025/09/26
# 最后修改日期: 2025/09/26 / Last Modified: 2025/09/26
# 版权: 2023 JQQ. All rights reserved. / Copyright: 2023 JQQ. All rights reserved.
# 依赖: GitHub Actions, Python 3.11, Poetry, poethepoet / Deps: GitHub Actions, Python 3.11, Poetry, poethepoet
# 描述: 普通测试工作流，安装依赖后运行 `poetry run poe test` / Description: Regular test workflow that installs deps then runs `poetry run poe test`

name: Tests

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Run unit/integration tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 安装 Poetry（通过 pip 安装，避免无效的第三方 Action）
      # Install Poetry via pip to avoid invalid third-party Action
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install poetry

      # 让 Poetry 在项目内创建虚拟环境，便于缓存
      # Configure Poetry to create venv inside project for better caching
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      # 缓存 Poetry 包缓存
      # Cache Poetry download cache
      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-pypoetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pypoetry-

      # 缓存虚拟环境 .venv
      # Cache project virtualenv .venv
      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version || '3.11' }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      # 安装依赖（包含 dev、test、cli 组，确保 poethepoet 可用）
      # Install dependencies (include dev, test, cli groups to ensure poethepoet is available)
      - name: Install dependencies
        run: |
          poetry --version
          poetry install --no-interaction --with dev,test,cli

      # 运行测试（poe 在虚拟环境中通过 poetry 调用）
      # Run tests through poe inside the Poetry venv
      - name: Run tests
        run: |
          poetry run poe test

      # 可选：展示 pytest 缓存或覆盖率工件（如需可开启）
      # Optional: upload artifacts like coverage reports (uncomment if needed)
      # - name: Upload coverage report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: coverage* || .coverage* || htmlcov
